/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.converter.typemaster;

import java.awt.Color;
import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.event.KeyEvent;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author GS-0994
 */
public class TypingSpeed extends javax.swing.JFrame {

    /** Creates new form TypingSpeed */
    public TypingSpeed() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_L_1 = new javax.swing.JLabel();
        lbl_L_2 = new javax.swing.JLabel();
        lbl_L_4 = new javax.swing.JLabel();
        lbl_L_3 = new javax.swing.JLabel();
        lbl_R_2 = new javax.swing.JLabel();
        lbl_R_4 = new javax.swing.JLabel();
        lbl_R_3 = new javax.swing.JLabel();
        lbl_R_1 = new javax.swing.JLabel();
        lbl_info = new javax.swing.JLabel();
        lbl_score = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        lbl_L_1.setText("-");

        lbl_L_2.setText("-");

        lbl_L_4.setText("-");

        lbl_L_3.setText("-");

        lbl_R_2.setText("-");

        lbl_R_4.setText("-");

        lbl_R_3.setText("-");

        lbl_R_1.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(lbl_info, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lbl_L_1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_L_2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_L_3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_L_4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(lbl_R_1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_R_2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_R_3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_R_4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl_score, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lbl_info, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_L_1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_L_2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_L_3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_L_4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_R_1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_R_2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_R_3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_R_4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(lbl_score, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static int counter = 0;
    static int score = 0;
    
    static void keyPressCounter(){
        /*
        if(counter == 8){
            counter = 0;
        }
        counter++;*/
    }
    
    static String caps = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static String candidateChars = "abcdefghijkl mnopqrstqvwxyz";
    
    public String generateRandomChars() {
        StringBuilder sb = new StringBuilder();
        
        Random random = new Random();

        return Character.toString(candidateChars.charAt(random.nextInt(candidateChars.length())));
    }
    
    public void setMasterText(){
      
      lbl_L_1.setText(generateRandomChars());
      lbl_L_2.setText(generateRandomChars());
      lbl_L_3.setText(generateRandomChars());
      lbl_L_4.setText(generateRandomChars());
        
      lbl_R_1.setText(generateRandomChars());
      lbl_R_2.setText(generateRandomChars());
      lbl_R_3.setText(generateRandomChars());
      lbl_R_4.setText(generateRandomChars());
      resetLbl(this);
      
    }
    
    private String actualKey(){
        
        switch(counter){
            case 0:
                return lbl_L_1.getText();
            case 1:
                return lbl_L_2.getText();
            case 2:
                return lbl_L_3.getText();
            case 3:
                return lbl_L_4.getText();
            case 4:
                return " ";
            case 5:
                return lbl_R_1.getText();
            case 6:
                return lbl_R_2.getText();
            case 7:
                return lbl_R_3.getText();
            case 8:
                return lbl_R_4.getText();
        }
        return null;
    }
            
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
        boolean flag = false;
        String keyPressed = Character.toString(evt.getKeyChar());
        
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            if(counter >= 8 || counter == 0){
                counter = 0;
                setMasterText();
                resetLbl(this);
              }
           /* lbl_info.setFont(new Font("Arial", Font.PLAIN, 20));
            //lbl_info.setText("START" + " : "+counter);
            lbl_info.setText("START");
            lbl_info.setForeground(Color.YELLOW);
            */
        }
        else if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE){
            score--;
            lbl_score.setFont(new Font("Arial", Font.PLAIN, 22));
            lbl_score.setForeground(Color.ORANGE);
            lbl_score.setText(String.valueOf(score));
        }
        
        else if(candidateChars.contains(keyPressed))
        {
        
        String actual = actualKey();
        
        switch(counter){
                
            case 0:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_L_1.setForeground(Color.GREEN);
                    counter++;
                }
                else{
                    flag = true;
                }
                break;
            case 1:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_L_2.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 2:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_L_3.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 3:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_L_4.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 4:
                if(actual.equalsIgnoreCase(keyPressed)){
                    counter++;
                }            
                break;
            case 5:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_R_1.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 6:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_R_2.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 7:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_R_3.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
            case 8:
                if(actual.equalsIgnoreCase(keyPressed)){
                    lbl_R_4.setForeground(Color.GREEN);
                    counter++;
                }            
                break;
        }
        if(flag){
            lbl_info.setFont(new Font("Arial", Font.PLAIN, 10));
            lbl_info.setText(keyPressed + " : "+counter + " : "+actual);
            lbl_info.setForeground(Color.YELLOW);
        }
        else{
            score++;
            lbl_score.setFont(new Font("Arial", Font.PLAIN, 22));
            lbl_score.setForeground(Color.ORANGE);
            lbl_score.setText(String.valueOf(score));
        }
        }
    }//GEN-LAST:event_formKeyPressed
    
    private static void resetFontSizeNCol(JLabel tolbl){
        tolbl.setFont(new Font("Arial", Font.PLAIN, 30));
        tolbl.setForeground(Color.red);
    }
    
    private static void resetLbl(TypingSpeed mainObj){
        counter = 0;
        resetFontSizeNCol(mainObj.lbl_L_1);
        resetFontSizeNCol(mainObj.lbl_L_2);
        resetFontSizeNCol(mainObj.lbl_L_3);
        resetFontSizeNCol(mainObj.lbl_L_4);

        resetFontSizeNCol(mainObj.lbl_R_1);
        resetFontSizeNCol(mainObj.lbl_R_2);
        resetFontSizeNCol(mainObj.lbl_R_3);
        resetFontSizeNCol(mainObj.lbl_R_4);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TypingSpeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TypingSpeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TypingSpeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TypingSpeed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

        TypingSpeed mainObj =  new TypingSpeed();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new TypingSpeed().setVisible(true);
                
                mainObj.setVisible(true);
              //  mainObj.setExtendedState(MAXIMIZED_BOTH);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbl_L_1;
    private javax.swing.JLabel lbl_L_2;
    private javax.swing.JLabel lbl_L_3;
    private javax.swing.JLabel lbl_L_4;
    private javax.swing.JLabel lbl_R_1;
    private javax.swing.JLabel lbl_R_2;
    private javax.swing.JLabel lbl_R_3;
    private javax.swing.JLabel lbl_R_4;
    private javax.swing.JLabel lbl_info;
    private javax.swing.JLabel lbl_score;
    // End of variables declaration//GEN-END:variables

}
